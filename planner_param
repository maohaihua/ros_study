global_planner
Parameters
~<name>/allow_unknown (bool, default: true)

    Specifies whether or not to allow the planner to create plans that traverse unknown space. NOTE: if you are using a 
    layered costmap_2d costmap with a voxel or obstacle layer, you must also set the track_unknown_space param for that 
    layer to be true, or it will convert all your unknown space to free space (which planner will then happily go right 
    through). 

~<name>/default_tolerance (double, default: 0.0)

    A tolerance on the goal point for the planner. The planner will attempt to create a plan that is as close to the 
    specified goal as possible but no further than default_tolerance away. 

~<name>/visualize_potential (bool, default: false)

    Specifies whether or not to visualize the potential area computed via a PointCloud2. 

~<name>/use_dijkstra (bool, default: true)

    If true, use dijkstra's algorithm. Otherwise, A*. 

~<name>/use_quadratic (bool, default: true)

    If true, use the quadratic approximation of the potential. Otherwise, use a simpler calculation. 

~<name>/use_grid_path (bool, default: false)

    If true, create a path that follows the grid boundaries. Otherwise, use a gradient descent method. 

~<name>/old_navfn_behavior (bool, default: false)

    If for some reason, you want global_planner to exactly mirror the behavior of navfn, set this to true (and use the 
    defaults for the other boolean parameters) 

~<name>/lethal_cost (int, default: 253)

    Lethal Cost (dynamic reconfigure) 

~<name>/neutral_cost (int, default: 50)

    Neutral Cost (dynamic reconfigure) 

~<name>/cost_factor (double, default: 3.)

    Factor to multiply each cost from costmap by (dynamic reconfigure) 

~<name>/publish_potential (bool, default: True)

    Publish Potential Costmap (dynamic reconfigure) 

~<name>/orientation_mode (int, default: 0)

    How to set the orientation of each point (None=0, Forward=1, Interpolate=2, ForwardThenInterpolate=3, Backward=4, 
    Leftward=5, Rightward=6) (dynamic reconfigure) 

~<name>/orientation_window_size (int, default: 1)

    What window to use to determine the orientation based on the position derivative specified by the orientation mode 
    (dynamic reconfigure) 
    
    base_local_planner
    Parameters

There are a large number of ROS Parameters that can be set to customize the behavior of 
the base_local_planner::TrajectoryPlannerROS wrapper. These parameters are grouped into several categories: robot 
configuration, goal tolerance, forward simulation, trajectory scoring, oscillation prevention, and global plan.

Robot Configuration Parameters

~<name>/acc_lim_x (double, default: 2.5)

    The x acceleration limit of the robot in meters/sec^2 

~<name>/acc_lim_y (double, default: 2.5)

    The y acceleration limit of the robot in meters/sec^2 

~<name>/acc_lim_theta (double, default: 3.2)

    The rotational acceleration limit of the robot in radians/sec^2 

~<name>/max_vel_x (double, default: 0.5)

    The maximum forward velocity allowed for the base in meters/sec 

~<name>/min_vel_x (double, default: 0.1)

    The minimum forward velocity allowed for the base in meters/sec. It is useful to specify this to guarantee 
    that velocity commands sent to a mobile base are high enough to allow the base to overcome friction. 

~<name>/max_vel_theta (double, default: 1.0)

    The maximum rotational velocity allowed for the base in radians/sec 

~<name>/min_vel_theta (double, default: -1.0)

    The minimum rotational velocity allowed for the base in radians/sec 

~<name>/min_in_place_vel_theta (double, default: 0.4)

    The minimum rotational velocity allowed for the base while performing in-place rotations in radians/sec 

~<name>/backup_vel (double, default: -0.1)

    DEPRECATED (use escape_vel):Speed used for backing up during escapes in meters/sec. Note that it must be 
    negative in order for the robot to actually reverse. A positive speed will cause the robot to move forward 
    while attempting to escape. 

~<name>/escape_vel (double, default: -0.1)

    Speed used for driving during escapes in meters/sec. Note that it must be negative in order for the robot 
    to actually reverse. A positive speed will cause the robot to move forward while attempting to escape. 
    New in navigation 1.3.1 

~<name>/holonomic_robot (bool, default: true)

    Determines whether velocity commands are generated for a holonomic or non-holonomic robot. For holonomic 
    robots, strafing velocity commands may be issued to the base. For non-holonomic robots, no strafing velocity 
    commands will be issued. 

The following parameters are only used if holonomic_robot is set to true:

~<name>/y_vels (list, default: [-0.3, -0.1, 0.1, 0.3])

    The strafing velocities that a holonomic robot will consider in meters/sec 

Goal Tolerance Parameters

~<name>/yaw_goal_tolerance (double, default: 0.05)

    The tolerance in radians for the controller in yaw/rotation when achieving its goal 

~<name>/xy_goal_tolerance (double, default: 0.10)

    The tolerance in meters for the controller in the x & y distance when achieving a goal 

~<name>/latch_xy_goal_tolerance (bool, default: false)

    If goal tolerance is latched, if the robot ever reaches the goal xy location it will simply rotate in place, 
    even if it ends up outside the goal tolerance while it is doing so. - New in navigation 1.3.1 

Forward Simulation Parameters

~<name>/sim_time (double, default: 1.0)

    The amount of time to forward-simulate trajectories in seconds 

~<name>/sim_granularity (double, default: 0.025)

    The step size, in meters, to take between points on a given trajectory 

~<name>/angular_sim_granularity (double, default: ~<name>/sim_granularity)

    The step size, in radians, to take between angular samples on a given trajectory. - New in navigation 1.3.1 

~<name>/vx_samples (integer, default: 3)

    The number of samples to use when exploring the x velocity space 

~<name>/vtheta_samples (integer, default: 20)

    The number of samples to use when exploring the theta velocity space 

~<name>/controller_frequency (double, default: 20.0)

    The frequency at which this controller will be called in Hz. Uses searchParam to read the parameter from parent 
    namespaces if not set in the namespace of the controller. For use with move_base, this means that you only need 
    to set its "controller_frequency" parameter and can safely leave this one unset. - New in navigation 1.3.1 

Trajectory Scoring Parameters

The cost function used to score each trajectory is in the following form:

cost = 
  pdist_scale * (distance to path from the endpoint of the trajectory in map cells or meters depending on the 
  meter_scoring parameter) 
  + gdist_scale * (distance to local goal from the endpoint of the trajectory in map cells or meters depending 
  on the meter_scoring parameter) 
  + occdist_scale * (maximum obstacle cost along the trajectory in obstacle cost (0-254))

~<name>/meter_scoring (bool, default: false)

    Whether the gdist_scale and pdist_scale parameters should assume that goal_distance and path_distance are expressed 
    in units of meters or cells. Cells are assumed by default. New in navigation 1.3.1 

~<name>/pdist_scale (double, default: 0.6)

    The weighting for how much the controller should stay close to the path it was given, maximal possible value is 5.0 

~<name>/gdist_scale (double, default: 0.8)

    The weighting for how much the controller should attempt to reach its local goal, also controls speed, maximal 
    possible value is 5.0 

~<name>/occdist_scale (double, default: 0.01)

    The weighting for how much the controller should attempt to avoid obstacles 

~<name>/heading_lookahead (double, default: 0.325)

    How far to look ahead in meters when scoring different in-place-rotation trajectories 

~<name>/heading_scoring (bool, default: false)

    Whether to score based on the robot's heading to the path or its distance from the path 

~<name>/heading_scoring_timestep (double, default: 0.8)

    How far to look ahead in time in seconds along the simulated trajectory when using heading scoring 

~<name>/dwa (bool, default: true)

    Whether to use the Dynamic Window Approach (DWA)_ or whether to use Trajectory Rollout (NOTE: In our experience 
    DWA worked as well as Trajectory Rollout and is computationally less expensive. It is possible that robots with 
    extremely poor acceleration limits could gain from running Trajectory Rollout, but we recommend trying DWA first.) 

~<name>/publish_cost_grid_pc (bool, default: false)

    Whether or not to publish the cost grid that the planner will use when planning. When true, a 
    sensor_msgs/PointCloud2 will be available on the ~<name>/cost_cloud topic. Each point cloud represents the cost 
    grid and has a field for each individual scoring function component as well as the overall cost for each cell, 
    taking the scoring parameters into account. New in navigation 1.4.0 

~<name>/global_frame_id (string, default: odom)

    The frame to set for the cost_cloud. Should be set to the same frame as the local costmap's global frame. New 
    in navigation 1.4.0 

Oscillation Prevention Parameters

~<name>/oscillation_reset_dist (double, default: 0.05)

    How far the robot must travel in meters before oscillation flags are reset 

Global Plan Parameters

~<name>/prune_plan (bool, default: true)

    Defines whether or not to eat up the plan as the robot moves along the path. If set to true, points will fall off 
    the end of the plan once the robot moves 1 meter past them. 

TrajectoryPlanner

The base_local_planner::TrajectoryPlanner provides implementations of the DWA and Trajectory Rollout algorithms described 
earlier. In order to use the base_local_planner::TrajectoryPlanner with ROS, please use the TrajectoryPlannerROS wrapper. 
It is not recommended to use the base_local_planner::TrajectoryPlanner on its own.

