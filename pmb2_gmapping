roslaunch pmb2_2dnav_gazebo pmb2_mapping_public.launch

rosrun key_teleop key_teleop.py

rosservice call /pal_map_manager/save_map "directory: ''"

roslaunch nucedog_2dnav_gazebo nucedog_mapping_public.launch



pmb2_mapping_public.launch
<include file="$(find pmb2_2dnav_gazebo)/launch/pmb2_mapping.launch">

pmb2_mapping.launch
  <arg name="world"  default="small_office"/>
  <arg name="laser_model"  default="sick-571"/>
  <arg name="gzpose" default="-x 0.0 -y 0.0 -z 0.0 -R 0.0 -P 0.0 -Y 0.0"/>

  <arg name="planner"        default="base"/>
  <arg name="global_planner" default="global_planner"/>
  <arg name="local_planner"  default="pal"/>
  <arg name="mapping"        default="karto"/>
  <arg name="octomap"        default="false"/>

  <arg name="recording" default="false"/>
  <arg name="extra_gazebo_args" default=""/>

  <arg name="public_sim"   default="false"/>

  <arg name="rviz"     default="true"/>
  <arg name="gzclient" default="true"/>

    <include file="$(find pmb2_gazebo)/launch/pmb2_gazebo.launch">

    <include file="$(find pmb2_2dnav)/launch/navigation.launch">
      <arg name="state"          value="mapping"/>
      <arg name="mapping"        value="$(arg mapping)"/>
      <arg name="octomap"        value="$(arg octomap)"/>
      <arg name="planner"        value="$(arg planner)"/>
      <arg name="global_planner" value="$(arg global_planner)"/>
      <arg name="local_planner"  value="$(arg local_planner)"/>
      <arg name="public_sim" value="$(arg public_sim)"/>
    </include>

    <node name="rviz" pkg="rviz" type="rviz" if="$(arg rviz)"
          args="-d $(find pmb2_2dnav)/config/rviz/navigation.rviz"/>

navigation.launch
  <arg name="state" default="localization"/>

  <arg name="planner"        default="base"/>
  <arg name="global_planner" default="global_planner"/>
  <arg name="local_planner"  default="pal"/>
  <arg name="localization"   default="amcl"/>
  <arg name="mapping"        default="karto"/>
  <arg name="octomap"        default="false"/>
  <arg name="public_sim"   default="false"/>
  
  <arg name="map" default="$(env HOME)/.pal/pmb2_maps/config"/>

  <!-- Localization or Mapping state -->
  <node pkg="pal_navigation_sm" type="navigation.sh" name="navigation"
        args="pmb2 $(arg state) $(arg localization) $(arg mapping) $(arg map) $(arg octomap)"/>

  <!-- Navigation State Machine -->
  <include file="$(find pmb2_2dnav)/launch/state_machine.launch">

  <!-- Planning -->
  <include file="$(find pmb2_2dnav)/launch/move_$(arg planner).launch">

  <!-- VO map server -->
  <group unless="$(arg public_sim)">
    <include file="$(find pal_vo_server)/launch/vo_server.launch"/>
  </group>


state_machine.launch
<arg name="config" default="$(find pmb2_2dnav)/config/state_machine/state_machine.yaml"/>
  <include file="$(find pal_navigation_sm)/launch/pal_navigation_sm.launch">
  
pal_navigation_sm.launch  
<node pkg ="pal_navigation_sm"
        type="pal_navigation_main_sm.py"
        name="pal_navigation_sm"
        output="screen">
    <rosparam file="$(arg config)" command="load"/>
    <param name="state" value="$(arg state)"/>  
    
 move_base.launch   
    
    

navigation.sh
# Run localization/mapping
roslaunch ${ROBOT}_2dnav $STATE.launch localization:=$LOCALIZATION mapping:=$MAPPING map:=$MAP multiple:=$MULTI tf_prefix:=$TF_PREFIX





find . -name '*.h' |rename 's/pal/nuc/'

sed -i "s/pal/nuc/g" `grep -rl pal ./`

sed -i "s/Pal/Nuc/g" `grep -rl Pal ./`

sed -i "s/PAL/NUC/g" `grep -rl PAL ./`

sed -i "s/pmb2/nucedog/g" `grep -rl pmb2 ./`

sed -i "s/Pmb2/nucedog/g" `grep -rl Pmb2 ./`

sed -i "s/PMB2/NUCEDOG/g" `grep -rl PMB2 ./`
find . -name '*' |rename 's/pmb2/nucedog/'

sed -i "s/victor.lopez@nuc-robotics.com/maohaihua@nuctech.com/g" `grep -rl victor.lopez@nuc-robotics.com ./`

