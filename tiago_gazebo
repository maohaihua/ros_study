  roslaunch tiago_gazebo tiago_gazebo.launch public_sim:=true robot:=steel
  
  roslaunch tiago_gazebo tiago_gazebo.launch public_sim:=true robot:=titanium

tiago_gazebo.launch:
  <arg name="world"  default="empty"/>  <!-- empty, ... (see ../worlds) -->
  <!--deprecated argument, you should specify the parameters below-->
  <!-- They are described in tiago.urdf.xacro -->
  <arg name="robot"  default="titanium"/>
  <arg name="arm"  default="$(eval {'iron': False}.get(arg('robot'), True))"/>
  <arg name="end_effector"  default="$(eval {'iron': 'false', 'steel': 'pal-gripper', 'titanium': 'pal-hey5'}.get(arg('robot'), 'pal-gripper'))"/>
  <arg name="ft_sensor"  default="$(eval {'titanium': 'schunk-ft'}.get(arg('robot'), 'false'))"/>
  <arg name="laser_model"  default="sick-571"/>
  <arg name="camera_model"  default="orbbec-astra"/>
  <arg name="multi" default=""/>
  <arg name="gzpose" default="-x 0.0 -y 0.0 -z 0.0 -R 0.0 -P 0.0 -Y 0.0"/>
  <arg name="gui" default="true"/>
  <arg name="debug" default="false"/>
  <arg name="public_sim" default="false"/>
  <arg name="tuck_arm" default="true"/>
  <arg name="recording" default="false"/>
  <arg name="extra_gazebo_args" default=""/>
  <arg name="use_moveit_camera" default="false"/>
  <arg name="use_dynamic_footprint" default="false"/>

  <env name="LC_NUMERIC" value="C" />

  <!-- start up world -->
  <include file="$(find pal_gazebo_worlds)/launch/pal_gazebo.launch">
    <arg name="world" value="$(arg world)"/>
    <arg name="gui" value="$(arg gui)"/>
    <arg name="debug" value="$(arg debug)"/>
    <arg name="recording" value="$(arg recording)"/>
    <arg name="extra_gz_model_path" value="$(find tiago_gazebo)/models"/>
    <arg name="extra_gz_resource_path" value="$(find tiago_gazebo)"/>
    <arg name="extra_gazebo_args" value="$(arg extra_gazebo_args)"/>
  </include>

  <!-- spawn robot in simulation -->
  <include file="$(find tiago_gazebo)/launch/tiago_spawn.launch">
    <arg name="arm" value="$(arg arm)"/>
    <arg name="end_effector" value="$(arg end_effector)"/>
    <arg name="ft_sensor" value="$(arg ft_sensor)"/>
    <arg name="laser_model" value="$(arg laser_model)"/>
    <arg name="camera_model" value="$(arg camera_model)"/>
    <arg name="multi" value="$(arg multi)"/>
    <arg name="gzpose" value="$(arg gzpose)"/>
  </include>

  <!-- bring up robot -->
  <include file="$(find tiago_gazebo)/launch/simulation_tiago_bringup.launch">
    <arg name="arm" value="$(arg arm)"/>
    <arg name="end_effector" value="$(arg end_effector)"/>
    <arg name="ft_sensor" value="$(arg ft_sensor)"/>
    <arg name="laser_model" value="$(arg laser_model)"/>
    <arg name="camera_model" value="$(arg camera_model)"/>
    <arg name="public_sim"  value="$(arg public_sim)"/>
    <arg name="use_moveit_camera" value="$(arg use_moveit_camera)"/>
    <arg name="use_dynamic_footprint" value="$(arg use_dynamic_footprint)"/>
  </include>

  <!-- point cloud throttle and filter -->
  <group unless="$(arg public_sim)">
    <include file="$(find pal_pcl_points_throttle_and_filter)/launch/throttle_filtering_points.launch">
      <arg name="cloud"  value="/xtion/depth_registered/points"/>
    </include>
  </group>

  <group if="$(arg tuck_arm)">
      <node name="tuck_arm" pkg="tiago_gazebo" type="tuck_arm.py" output="screen"/>
  </group>
  <node name="image_proc" pkg="image_proc" type="image_proc" ns="xtion/rgb"/>

pal_gazebo_worlds)/launch/pal_gazebo.launch:
  <arg name="world"  default="small_office"/>  <!-- empty, small_office, ... (see ../worlds) -->
  <arg name="gui" default="true"/>
  <arg name="debug" default="false"/>
  <arg name="recording" default="false"/>
  <arg name="extra_gazebo_args" default=""/>
  <arg name="extra_gz_model_path" default=""/>
  <arg name="extra_gz_resource_path" default=""/>

  <env name="GAZEBO_MODEL_PATH" value="$(arg extra_gz_model_path):$(find pal_gazebo_worlds)/../pal_gazebo_worlds_private/models:$(find pal_gazebo_worlds)/models:$(optenv GAZEBO_MODEL_PATH)"/>
  <env name="GAZEBO_RESOURCE_PATH" value="$(arg extra_gz_resource_path):$(find pal_gazebo_worlds)/../pal_gazebo_worlds_private:$(find pal_gazebo_worlds):$(optenv GAZEBO_RESOURCE_PATH)"/>

  <!-- start up world -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <!-- world_name is relative to directories in GAZEBO_RESOURCE_PATH-->
    <arg name="world_name" value="worlds/$(arg world).world"/>
    <arg name="extra_gazebo_args" value="$(arg extra_gazebo_args)"/>
    <arg name="gui" value="$(arg gui)"/>
    <arg name="debug" value="$(arg debug)"/>
    <arg name="recording" value="$(arg recording)"/>
  </include>


tiago_gazebo)/launch/tiago_spawn.launch:
  <arg name="arm"/>
  <arg name="end_effector"/>
  <arg name="ft_sensor"/>
  <arg name="laser_model"/>
  <arg name="camera_model"/>
  <arg name="gzpose" default="-x 0 -y 0 -z 0.0 -R 0.0 -P 0.0 -Y 0.0"/>
  <arg name="multi" default=""/>
  <arg name="model_name" default="tiago"/>
  <arg name="file_suffix" value="$(eval ('no-arm' if not arm else end_effector+ ('' if not ft_sensor else '_'+ft_sensor)))"/>
  <rosparam ns="pal_robot_info" param="type">"tiago"</rosparam>

  <!-- PID gains -->
  <rosparam command="load" file="$(find tiago_controller_configuration_gazebo)/config/pids.yaml"/>

  <rosparam command="load" file="$(find tiago_controller_configuration_gazebo)/config/hardware_gazebo/tiago_pal_hardware_gazebo_$(arg file_suffix).yaml"/>

  <!-- Joystick controller parameters -->
  <!--
  <rosparam file="$(find tiago_gazebo)/config/joy_teleop_sim.yaml" command="load"/>
  -->

  <!-- Robot model -->
  <include file="$(find tiago_description)/robots/upload.launch">
    <arg name="arm" value="$(arg arm)"/>
    <arg name="end_effector" value="$(arg end_effector)"/>
    <arg name="ft_sensor" value="$(arg ft_sensor)"/>
    <arg name="laser_model" value="$(arg laser_model)"/>
    <arg name="camera_model" value="$(arg camera_model)"/>
    <arg name="multi"  value="$(arg multi)"/>
  </include>

  <!-- Spawn robot in Gazebo -->
  <node pkg="gazebo_ros" type="spawn_model" name="spawn_model"
    args="-urdf -param robot_description $(arg gzpose) -model $(arg model_name)" />


tiago_gazebo)/launch/simulation_tiago_bringup.launch:
  <arg name="arm"/>
  <arg name="end_effector"/>
  <arg name="ft_sensor"/>
  <arg name="laser_model"/>
  <arg name="camera_model"/>
  <arg name="public_sim"     default="false"/>
  <arg name="tf_prefix" default=""/>
  <arg name="use_moveit_camera" default="false"/>
  <arg name="use_dynamic_footprint" default="false"/>

  <!-- Joint trajectory and diff drive controllers -->
  <rosparam command="load" file="$(find tiago_controller_configuration_gazebo)/config/mobile_base_controller.yaml"/>
  <include file="$(find tiago_controller_configuration_gazebo)/launch/tiago_controllers.launch">
    <arg name="arm" value="$(arg arm)"/>
    <arg name="end_effector" value="$(arg end_effector)"/>
    <arg name="ft_sensor" value="$(arg ft_sensor)"/>
    <arg name="laser_model" value="$(arg laser_model)"/>
    <arg name="camera_model" value="$(arg camera_model)"/>
    <arg name="use_moveit_camera" value="$(arg use_moveit_camera)"/>
    <arg name="tf_prefix" value="$(arg tf_prefix)"/>
  </include>

  <!-- Robot state publisher -->
  <node pkg="robot_state_publisher" type="state_publisher" name="robot_state_publisher">
    <param name="publish_frequency" type="double" value="50.0"/>
    <param name="tf_prefix" type="string" value="$(arg tf_prefix)"/>
  </node>

  <!-- TF lookup -->
  <node pkg="tf_lookup" type="tf_lookup" name="tf_lookup" output="screen"/>

  <!-- Twist mux -->
  <group if="$(arg public_sim)">
    <include file="$(find tiago_bringup)/launch/twist_mux.launch">
      <arg name="cmd_vel_out" value="mobile_base_controller/cmd_vel" />
    </include>
  </group>
  <group unless="$(arg public_sim)">
    <include file="$(find tiago_bringup)/launch/twist_mux.launch">
      <arg name="cmd_vel_out" value="/twist_mux/cmd_vel" />
    </include>
  </group>

  <!-- Dynamic footprint -->
  <group unless="$(arg public_sim)">
    <include file="$(find tiago_bringup)/launch/dynamic_footprint.launch">
      <arg name="arm" value="$(arg arm)"/>
      <arg name="end_effector" value="$(arg end_effector)"/>
      <arg if="$(arg use_dynamic_footprint)" name="remap_footprint_to" value="/move_base/local_costmap/footprint"/>
    </include>
  </group>

  <!-- Speed limit -->
  <group unless="$(arg public_sim)">
    <include file="$(find speed_limit)/launch/speed_limit.launch">
      <arg name="config"    value="$(find tiago_bringup)/config/speed_limit.yaml"/>
      <arg name="footprint" value="$(find pmb2_description)/urdf/base/footprint.yaml"/>
    </include>
  </group>

  <!-- Joystick controller -->
  <include file="$(find tiago_bringup)/launch/joystick_teleop.launch"/>

  <group unless="$(arg public_sim)">
    <include file="$(find sensor_to_cloud)/launch/sonar_to_cloud.launch"/>
   </group>

  <!-- Republish image_raw to image_rect_color to have the same available topic -->
  <node name="image_raw_to_rect_color_relay" pkg="topic_tools" type="relay" args="xtion/rgb/image_raw xtion/rgb/image_rect_color" />

tiago_controller_configuration_gazebo)/launch/tiago_controllers.launch:
<arg name="public_sim"        default="false"/>
    <arg name="arm"/>
    <arg name="end_effector"/>
    <arg name="ft_sensor"/>
    <arg name="laser_model"/>
    <arg name="camera_model"/>
    <arg name="use_moveit_camera" default="false"/>
    <arg name="tf_prefix"         default=""/>
    <include file="$(find tiago_controller_configuration_gazebo)/launch/default_controllers.launch">
        <arg name="tf_prefix" value="$(arg tf_prefix)"/>
        <arg name="arm" value="$(arg arm)"/>
    </include>
    <include file="$(find tiago_controller_configuration)/launch/imu_controller.launch"/>
    <group if="$(eval ft_sensor == 'schunk-ft')">
        <include file="$(find tiago_controller_configuration)/launch/force_torque_controller.launch"/>
    </group>
    <group if="$(eval end_effector == 'pal-gripper')">
        <rosparam command="load" file="$(find tiago_controller_configuration)/config/pal-gripper_joint_trajectory_controllers.yaml" />
        <include file="$(find pal_gripper_controller_configuration_gazebo)/launch/gripper_controller.launch"/>
    </group>

    <group if="$(eval end_effector == 'schunk-wsg')">
        <rosparam command="load" file="$(find tiago_controller_configuration)/config/schunk-wsg_joint_trajectory_controllers.yaml" />
        <include file="$(find pal_wsg_gripper_controller_configuration_gazebo)/launch/gripper_fingertip_sensor_controller.launch">
          <arg name="finger" value="left"/>
        </include>
        <include file="$(find pal_wsg_gripper_controller_configuration_gazebo)/launch/gripper_fingertip_sensor_controller.launch">
          <arg name="finger" value="right"/>
        </include>
        <include file="$(find pal_wsg_gripper_controller_configuration_gazebo)/launch/gripper_controller.launch"/>
    </group>
    <group if="$(eval end_effector == 'pal-hey5')">
        <rosparam command="load" file="$(find tiago_controller_configuration)/config/pal-hey5_joint_trajectory_controllers.yaml" />
        <include file="$(find tiago_controller_configuration_gazebo)/launch/hey5_controller.launch"/>
    </group>

    <!-- Play motion -->
    <include file="$(find tiago_bringup)/launch/play_motion.launch">
      <arg name="arm"  value="$(arg arm)"/>
      <arg name="end_effector"  value="$(arg end_effector)"/>
      <arg name="ft_sensor"  value="$(arg ft_sensor)"/>
    </include>

    <!-- Motion planning -->
    <include file="$(find tiago_moveit_config)/launch/move_group.launch">
      <arg name="arm" value="$(arg arm)"/>
      <arg name="end_effector" value="$(arg end_effector)"/>
      <arg name="ft_sensor" value="$(arg ft_sensor)"/>
      <arg name="laser_model" value="$(arg laser_model)"/>
      <arg name="camera_model" value="$(arg camera_model)"/>
      <arg name="camera" value="$(arg use_moveit_camera)"/>
    </include>

tiago_bringup)/launch/twist_mux.launch:

tiago_bringup)/launch/dynamic_footprint.launch:

tiago_description)/robots/upload.launch:
  <arg name="multi" default=""/>
  <arg name="arm"  default="True"/>
  <arg name="end_effector"  default="pal-hey5"/>
  <arg name="ft_sensor"  default="schunk-ft"/>
  <arg name="laser_model"  default="sick-571"/>
  <arg name="camera_model"  default="orbbec-astra"/>

  <!-- Robot description -->
  <param name="robot_description"
    command="rosrun xacro xacro --inorder
    '$(find tiago_description)/robots/tiago.urdf.xacro'
    arm:=$(arg arm)
    end_effector:=$(arg end_effector)
    ft_sensor:=$(arg ft_sensor)
    laser_model:=$(arg laser_model)
    camera_model:=$(arg camera_model)
    $(arg multi)" />
           <rosparam command="load" file="$(find tiago_description)/config/collision/collision_parameters.yaml" />

tiago_description)/robots/tiago.urdf.xacro:
<robot  xmlns:xacro="http://ros.org/wiki/xacro"
        name="tiago" >
    <xacro:arg name="arm" default="true"/> <!-- true, false -->
    <xacro:arg name="end_effector" default="pal-hey5"/> <!-- false, pal-gripper, pal-hey5, schunk-wsg-->
    <xacro:arg name="ft_sensor" default="schunk-ft"/> <!-- false, schunk-ft -->
    <xacro:arg name="laser_model" default="sick-571"/> <!-- false, hokuyo, sick-551, sick-561, sick-571-->
    <xacro:arg name="camera_model" default="orbbec-astra"/> <!-- false, orbbec-astra, orbbec-astra-pro, asus-xtion -->
    <xacro:arg name="has_thermal_camera" default="false"/>
    <xacro:arg name="multiple" default="false"/>
    <xacro:arg name="namespace" default=""/>
    <xacro:property name="end_effector" value="$(arg end_effector)" />
    <xacro:property name="ft_sensor" value="$(arg ft_sensor)" />
    <xacro:property name="laser_model" value="$(arg laser_model)" />
    <xacro:property name="camera_model" value="$(arg camera_model)" />
    <xacro:property name="is_multiple" value="$(arg multiple)" />
    <xacro:property name="nsp" value="$(arg namespace)" />

  <xacro:if value="${end_effector not in ['false', 'pal-gripper', 'pal-hey5', 'schunk-wsg']}">
    <xacro:wrong_end_effector/>
  </xacro:if>
  <xacro:if value="${ft_sensor not in ['false', 'schunk-ft']}">
    <xacro:wrong_ft_sensor/>
  </xacro:if>
  <xacro:if value="${laser_model not in ['false', 'sick-551', 'sick-561', 'sick-571', 'hokuyo']}">
    <xacro:wrong_laser_model/>
  </xacro:if>
  <xacro:if value="${camera_model not in ['false', 'orbbec-astra', 'orbbec-astra-pro', 'asus-xtion']}">
    <xacro:wrong_camera_model/>
  </xacro:if>
        <!-- The properties below are modified using empy http://www.alcyone.com/software/empy/
             from the create_robot.py tool. Handle them with care -->
   <xacro:property name="has_arm"                 value="$(arg arm)"/>
   <xacro:property name="has_schunk_ft"           value="${ft_sensor == 'schunk-ft'}"/>
   <xacro:property name="has_ft_sensor"           value="${has_schunk_ft}"/> <!-- This should be OR'ed with other FT sensors-->
   <xacro:property name="end_effector_link"       value="${'wrist_ft_tool_link' if has_ft_sensor else 'arm_tool_link'}"/>
   <xacro:property name="end_effector_name"       value="${'hand' if end_effector == 'pal-hey5' else 'gripper'}"/>
   <xacro:property name="wrist_6_range"           value="${ 81 if has_ft_sensor else 90 }"/>
   <xacro:property name="head_link_name"          value="head_2_link"/>

  <!-- The following included files set up definitions of parts of the robot body -->
  <!-- Base -->
  <xacro:include filename="$(find pmb2_description)/urdf/base/base_sensors.urdf.xacro" />

  <!-- Torso -->
  <xacro:include filename="$(find tiago_description)/urdf/torso/torso.urdf.xacro" />

  <xacro:if value="${has_arm}">
    <!-- Arm -->
    <xacro:include filename="$(find tiago_description)/urdf/arm/arm.urdf.xacro" />
    <xacro:include filename="$(find tiago_description)/urdf/end_effector/end_effector.urdf.xacro" />
  </xacro:if>

  <!-- Force Torque sensor -->
  <xacro:if value="${has_ft_sensor}">
    <xacro:include filename="$(find tiago_description)/urdf/sensors/ftsensor.urdf.xacro" />
  </xacro:if>

  <!-- Head -->
  <xacro:include filename="$(find tiago_description)/urdf/head/head.urdf.xacro" />

  <!-- Generic simulator_gazebo plugins -->
  <xacro:include filename="$(find tiago_description)/gazebo/gazebo.urdf.xacro" />
  <!-- Materials for visualization -->
  <xacro:include filename="$(find tiago_description)/urdf/materials.urdf.xacro" />

  <!-- Now we can start using the macros included above to define the actual robot -->
  <xacro:base_sensors name="base" laser_model="$(arg laser_model)" sonars="true" microphone="true"/>
  <xacro:tiago_torso name="torso" parent="base_link"/>
  <xacro:head name="head" parent="torso_lift_link" camera_model="$(arg camera_model)"/>
  <xacro:if value="${has_arm}">
	  <xacro:tiago_arm name="arm" parent="torso_lift_link" wrist_6_range="${wrist_6_range}" reflect="1">
        <origin xyz="0.15505 0.014 -0.151" rpy="0 0 ${-90 * deg_to_rad}" />
      </xacro:tiago_arm>
      <xacro:tiago_end_effector name="${end_effector_name}" parent="${end_effector_link}" type="${end_effector}" reflect="1"/>
  </xacro:if>

  <!-- Force Torque sensor -->
  <xacro:if value="${has_ft_sensor}">
      <xacro:ft_sensor name="wrist" parent="arm_tool_link" />
  </xacro:if>

  <!-- Thermal camera -->
  <xacro:if value="$(arg has_thermal_camera)">
    <joint name="thermal_camera_joint" type="fixed">
        <parent link="${head_link_name}"/>
        <child link="thermal_camera"/>
        <origin xyz="0.05 0.15 0" rpy="${0*deg_to_rad} ${-90*deg_to_rad} ${-180*deg_to_rad}" />
    </joint>
    <link name="thermal_camera">
        <inertial>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <mass value="0.0001" />
            <inertia ixx="0.0001"  ixy="0"  ixz="0" iyy="0.0001" iyz="0" izz="0.0001" />
        </inertial>
    </link>
  </xacro:if>

  <!-- RGBD Laser Link -->
  <joint name="rgbd_laser_joint" type="fixed">
      <parent link="base_footprint"/>
      <child link="rgbd_laser_link"/>
      <origin xyz="-0.9 0 0" rpy="0 0 0" />
  </joint>
  <link name="rgbd_laser_link">
      <inertial>
          <origin xyz="0 0 0" rpy="0 0 0"/>
          <mass value="0.0001" />
          <inertia ixx="0.0001"  ixy="0"  ixz="0" iyy="0.0001" iyz="0" izz="0.0001" />
      </inertial>
  </link>
  
  tiago_description)/gazebo/gazebo.urdf.xacro:
  <robot name="tiago" xmlns:xacro="http://ros.org/wiki/xacro">
  <gazebo>
    <plugin filename="libgazebo_ros_control.so" name="gazebo_ros_control">
      <ns></ns>
      <robotSimType>pal_hardware_gazebo/PalHardwareGazebo</robotSimType>
      <xacro:if value="${is_multiple}">
          <robotNamespace>/${nsp}</robotNamespace>
      </xacro:if>
      <xacro:unless value="${is_multiple}">
          <robotNamespace></robotNamespace>
      </xacro:unless>
      <controlPeriod>0.001</controlPeriod>
    </plugin>

    <plugin filename="libgazebo_ros_p3d.so" name="gazebo_ros_p3d">
      <bodyName>base_link</bodyName>
      <topicName>ground_truth_odom</topicName>
      <alwaysOn>true</alwaysOn>
      <updateRate>100.0</updateRate>
      <xacro:if value="${is_multiple}">
          <robotNamespace>/${nsp}</robotNamespace>
      </xacro:if>
    </plugin>
  </gazebo>

  <gazebo>
    <plugin filename="libgazebo_world_odometry.so" name="gazebo_ros_odometry">
      <frameName>base_footprint</frameName>
      <topicName>floating_base_pose_simulated</topicName>
      <xacro:if value="${is_multiple}">
          <robotNamespace>/${nsp}</robotNamespace>
      </xacro:if>
    </plugin>
  </gazebo>


  <gazebo reference="base_imu_link">
    <!-- this is expected to be reparented to pelvis with appropriate offset
         when imu_link is reduced by fixed joint reduction -->
    <!-- todo: this is working with gazebo 1.4, need to write a unit test -->
    <sensor name="imu_sensor" type="imu">
      <always_on>1</always_on>
      <update_rate>1000.0</update_rate>
      <imu>
        <noise>
          <type>gaussian</type>
          <!-- Noise parameters from Boston Dynamics
               (http://gazebosim.org/wiki/Sensor_noise):
                 rates (rad/s): mean=0, stddev=2e-4
                 accels (m/s/s): mean=0, stddev=1.7e-2
                 rate bias (rad/s): 5e-6 - 1e-5
                 accel bias (m/s/s): 1e-1
               Experimentally, simulation provide rates with noise of
               about 1e-3 rad/s and accels with noise of about 1e-1 m/s/s.
               So we don't expect to see the noise unless number of inner iterations
               are increased.

               We will add bias.  In this model, bias is sampled once for rates
               and once for accels at startup; the sign (negative or positive)
               of each bias is then switched with equal probability.  Thereafter,
               the biases are fixed additive offsets.  We choose
               bias means and stddevs to produce biases close to the provided
               data. -->
          <rate>
            <mean>0.0</mean>
            <stddev>2e-4</stddev>
            <bias_mean>0.0000075</bias_mean>
            <bias_stddev>0.0000008</bias_stddev>
          </rate>
          <accel>
            <mean>0.0</mean>
            <stddev>1.7e-2</stddev>
            <bias_mean>0.1</bias_mean>
            <bias_stddev>0.001</bias_stddev>
          </accel>
        </noise>
      </imu>
    </sensor>
  </gazebo>

  <!-- define global properties -->
  <xacro:property name="M_PI" value="3.1415926535897931" />
